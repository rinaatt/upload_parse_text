"""
Django settings for docker_django project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import os.path as op
import environ

root: environ.Path = environ.Path(__file__) - 2
env = environ.Env(DEBUG=(bool, False), )
# environ.Env.read_env()

BASE_DIR: str = root()
sys.path.insert(0, root('apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = env('DEBUG', cast=bool)

ALLOWED_HOSTS: list = env('ALLOWED_HOSTS', cast=list, default=['*'])


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            root('backend', 'templates'),
        ],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
DATABASES = {
    'default': env.db('DATABASE_URL')
}
REDIS_URL = env('REDIS_URL')
CELERY_BROKER_URL = env('CELERY_BROKER')

# CACHES = {
#     'default': env.cache('REDIS_URL'),
# }
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# LOGIN_URL = '/api-auth/login/'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation'
             '.UserAttributeSimilarityValidator', },
    {'NAME': 'django.contrib.auth.password_validation'
             '.MinimumLengthValidator', },
    {'NAME': 'django.contrib.auth.password_validation'
             '.CommonPasswordValidator', },
    {'NAME': 'django.contrib.auth.password_validation'
             '.NumericPasswordValidator', },
]


# Internationalization
LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = env('TIME_ZONE', default='UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATICFILES_DIRS = [
    root('backend', 'static'),
]
STATIC_ROOT = root('public', 'static')
if not op.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)
STATIC_URL = '/static/'

UPLOAD_DIR = root('upload')
# PARSE_SLEEP = 0.01

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'custom': {
            'format': '[%(name)s %(levelname)s] %(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'custom',
        },
    },
    'loggers': {
        'app': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}
